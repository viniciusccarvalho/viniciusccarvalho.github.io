<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Developer's guild]]></title>
  <link href="http://vcc.devguild.us/atom.xml" rel="self"/>
  <link href="http://vcc.devguild.us/"/>
  <updated>2015-04-07T19:02:22-04:00</updated>
  <id>http://vcc.devguild.us/</id>
  <author>
    <name><![CDATA[Vinicius Carvalho]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RXFire - Gemfire Meets RX]]></title>
    <link href="http://vcc.devguild.us/blog/2015/04/07/rxfire-gemfire-meets-rx/"/>
    <updated>2015-04-07T18:14:45-04:00</updated>
    <id>http://vcc.devguild.us/blog/2015/04/07/rxfire-gemfire-meets-rx</id>
    <content type="html"><![CDATA[<h2>Gemfire meets RXJava</h2>

<p><a href="http://pivotal.io/big-data/pivotal-gemfire">Gemfire</a> is a very powerful IMDG solution. One of the many aspects that differentiate it from others in the space, is the great support for Continuous Queries.</p>

<p>CQ allows developers to subcribe to regions on the data grid and receive live notifications when changes happen. There are several examples of applications that could be built using this feature, from
CEP to creating data streams.</p>

<p>Since <a href="https://github.com/ReactiveX/RxJava/wiki">RX Java</a> and <a href="http://www.reactive-streams.org/">reactive-streams</a> are very hot in the moment, I decided that I should play around the idea of creating
streams of data from a gemfire region into an Observable and then be able to play with it a little.</p>

<h3>Introduction</h3>

<p>The project can be found on <a href="https://github.com/viniciusccarvalho/rxfire">github</a>, I&rsquo;ll focus on some of the key classes that were implemented for this prototype.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubscriberEventAdapter</span> <span class="kd">implements</span> <span class="n">EventAdapter</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Subscriber</span> <span class="n">subscriber</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SubscriberEventAdapter</span><span class="o">(</span><span class="n">Subscriber</span> <span class="n">subscriber</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">subscriber</span> <span class="o">=</span> <span class="n">subscriber</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleEvent</span><span class="o">(</span><span class="n">CqEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This first class is just a simple adapter. It translates the gemfire reflection based query listener (handleEvent method) and invokes the RX subscriber that would be subscribing for events from this region.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StockStreamService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ContinuousQueryListenerContainer</span> <span class="n">cqlc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">CqEvent</span><span class="o">&gt;</span> <span class="nf">toObservable</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">create</span><span class="o">((</span><span class="n">subscriber</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ContinuousQueryDefinition</span> <span class="n">def</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ContinuousQueryDefinition</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="k">new</span> <span class="nf">ContinuousQueryListenerAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nf">SubscriberEventAdapter</span><span class="o">(</span><span class="n">subscriber</span><span class="o">)));</span>
</span><span class='line'>            <span class="n">cqlc</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="n">def</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is where the rubber meets the road. When an observable its created it registers a query listener within the container and that listener invokes this Observable&rsquo;s subscriber on events.</p>

<h3>Using</h3>

<p>It really could not be simpler, there are things to be done on subscription handling and multiple subscribers, but in a nutshell that&rsquo;s pretty much it. Now a simple example test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testStreamAggregation</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Observable</span><span class="o">&lt;</span><span class="n">CqEvent</span><span class="o">&gt;</span> <span class="n">observable</span> <span class="o">=</span> <span class="n">streamService</span><span class="o">.</span><span class="na">toObservable</span><span class="o">(</span><span class="s">&quot;SELECT * FROM /stocks t where t.value &gt; 1&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">observable</span><span class="o">.</span><span class="na">map</span><span class="o">((</span><span class="n">event</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">Stock</span><span class="o">)</span> <span class="o">((</span><span class="n">PdxInstance</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getNewValue</span><span class="o">()).</span><span class="na">getObject</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">filter</span><span class="o">((</span><span class="n">stock</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">stock</span><span class="o">.</span><span class="na">getId</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;PVT&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">take</span><span class="o">(</span><span class="mi">5</span><span class="o">).</span><span class="na">subscribe</span><span class="o">((</span><span class="n">stock</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stock</span><span class="o">);</span>
</span><span class='line'>                <span class="o">},</span> <span class="o">(</span><span class="n">error</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">error</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">latch</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This stream is very basic, but it shows some basic functionalities of RX and why you should be excited on morphing your listeners into observables.</p>

<p>The first line we create an Observable that listens for changes on a particular query.</p>

<p>This observable first maps object of type CqEvent<PDXInstance> -> Stock</p>

<p>Then we filter to only consume stocks of type &lsquo;PVT&rsquo;</p>

<p>And finally we only take the first 5 stocks of this stream.</p>

<p>The subcriber part will then act on those 5 stocks, here just printing them to the console.</p>

<p>The real power of RX comes when you start combining multiple streams, imagine for a moment you had a second or a third stream from different gemfire regions, or even, as from my previous <a href="http://vcc.devguild.us/blog/2014/11/13/rxjava-simple-concurrency-usage/">post</a> you could combine a stream from MongoDB or from Twitter. Once you move your Iterables into Observables a new horizon opens for you.</p>

<p>Cheers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RXJava - Simple Concurrency Usage]]></title>
    <link href="http://vcc.devguild.us/blog/2014/11/13/rxjava-simple-concurrency-usage/"/>
    <updated>2014-11-13T17:03:51-05:00</updated>
    <id>http://vcc.devguild.us/blog/2014/11/13/rxjava-simple-concurrency-usage</id>
    <content type="html"><![CDATA[<h2>Simplifying concurrency</h2>

<p>I&rsquo;ve been playing with <a href="https://github.com/ReactiveX/RxJava/wiki">RXJava</a> for a while now. Concurreny has always been a facinating topic to me. I read Brian Goetz&rsquo;s <a href="http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601">Java Concurrency in practice</a> several times, and if you are a java developer and you haven&rsquo;t, shame on you :-(</p>

<p>This post is not meant to go on any discussion around concurrent vs parallel, read this: <a href="http://www.nada.kth.se/~snilsson/concurrency/">fundamentals of concurrent programming</a> and watch Rob Pike&rsquo;s <a href="https://www.youtube.com/watch?v=cN_DpYBzKso">Concurrency is not Parallelism</a></p>

<p>Instead I just want to share some code I wrote to solve a simple problem that was taking me way more time than needed by using traditional java constructs to deal with parallism (Executors, BlockingQueues, Runnables and CountDownLatches)</p>

<h3>The problem</h3>

<p>I&rsquo;m building a demo to show how amazing <a href="http://projects.spring.io/spring-boot/">Spring Boot</a>, <a href="http://projects.spring.io/spring-cloud/">Spring cloud</a> and <a href="http://www.pivotal.io/platform-as-a-service/pivotal-cf">Cloud Foundry</a> are when combined together to build next generation applications.</p>

<p>The demo uses data from <a href="https://www.themoviedb.org/">The Movie Database project</a>. Collecting the data needs to respect a rate limit of
3 requests per second.</p>

<p>So the problem is: download a maximum number of data in parallel while respecting the limits of the API. After downloading the data, load it
on a mongo db collection, but transform it to store only parts of data.</p>

<p>Starting with the basics I created a class that transforms a mongodb cursor into an Observable:</p>

<div><script src='https://gist.github.com/bbada1e463baf61b2088.js?file=ObservableMongo.java'></script>
<noscript><pre><code>package us.devguild.reactive.mongo;

import org.springframework.stereotype.Component;

import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.DB;
import rx.Observable;

@Component
public class ObservableMongo {
    
    
    private DB mongoDB;
    
       @Autowired
    public ObservableMongo(DB db){
        this.mongoDB = db;
    }
    
    public Observable&lt;DBObject&gt; toObservable(String collection, DBObject query){
        
        return Observable.create(subscriber -&gt; {
            DBObject dbo = null;
            try {
                DBCollection dbCol = mongoDB.getCollection(collection);
                final DBCursor cursor = dbCol.find(query);
                while(cursor.hasNext()){
                    dbo = cursor.next();
                    subscriber.onNext(dbo);
                }
                subscriber.onCompleted();
            } catch (Exception e) {
                subscriber.onError(e);
            }
            
        });
    }
    
}
</code></pre></noscript></div>


<p>In order to control the limit of access per second I&rsquo;ve relied on <a href="https://code.google.com/p/guava-libraries/">Guava</a> Rate limiter, I&rsquo;m
assuming it uses some sort of <a href="http://en.wikipedia.org/wiki/Token_bucket">Token Bucket</a> to control, but who cares :). Note that this is a
form of Callstack blocking as discussed on <a href="https://github.com/ReactiveX/RxJava/wiki/Backpressure">RXJava Backpressure documentation</a>, it worked
fine for me for the moment:</p>

<div><script src='https://gist.github.com/c10bb46f02cdca9b5ee9.js?file=RateLimitedTemplate.java'></script>
<noscript><pre><code>package us.devguild.reactive.web.client;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.google.common.util.concurrent.RateLimiter;

@Component
public class RateLimitedTemplate {

    private RateLimiter limiter; 
    
    private RestTemplate template;
    
    
    @Autowired
    public RateLimitedTemplate(RestTemplate template) {
        this.limiter = RateLimiter.create(3.0);;
        this.template = template;
    }



    public &lt;T&gt; T get(String url, Map&lt;String,Object&gt; params, Class&lt;T&gt; type){
        limiter.acquire();
        return template.getForEntity(url, type,params).getBody();
    }
    
}   
</code></pre></noscript></div>


<p>And finally the small snippet that loads the data:</p>

<div><script src='https://gist.github.com/ba3a79089af37c2a51ed.js?file=TMDBLoader.java'></script>
<noscript><pre><code>
public void loadImages() {
    DBCollection imagesCol = mongoTemplate.getDb().getCollection(&quot;images&quot;);
    Observable&lt;DBObject&gt; source = observableMongo.toObservable(&quot;movies&quot;, new BasicDBObject(&quot;images&quot;, new BasicDBObject(&quot;$eq&quot;, null))).subscribeOn(Schedulers.io());
    source.parallel(f -&gt; {
            return f.map(dbo -&gt; {
                Map params = new HashMap(); 
                Map result = null;
                params.put(&quot;api_key&quot;, TMDBClient.API_KEY);
                params.put(&quot;id&quot;,dbo.get(&quot;_id&quot;));
                result = template.get(TMDBClient.IMAGES_URL, params, Map.class);
                return result;
            }).subscribeOn(Schedulers.computation());
        }).toBlocking().forEach(response -&gt; {
            imagesCol.save(new BasicDBObject(response));
        });
    
}</code></pre></noscript></div>


<p>We start from a pre-populated DB with movies, and look for those which images have not been loaded yet. That returns our observable. From that
observable we use the parallel operator to execute the subscription on a separate thread. The rate limited client will take care of blocking calls
to respect the limit. Finally we transform the observable into a BlockingObservable and persist each response back on the database on a different
collection.</p>

<p>I&rsquo;m not sure about you, but before using RXJava to do this I would need a bunch of different constructs to fullfil the exact same purpose.</p>

<h3>Further reading</h3>

<ul>
<li><a href="http://www.grahamlea.com/2014/07/rxjava-threading-examples/">RX Java threading examples</a> : Great example on how threading works on RX Java</li>
<li><a href="http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/">Java 8 stream tutorials</a> : If you need to get up to speed with lambdas and java 8.</li>
</ul>

]]></content>
  </entry>
  
</feed>
